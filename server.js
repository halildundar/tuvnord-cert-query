(()=>{var __webpack_modules__={946:()=>{eval('\n;// external "dotenv"\nconst external_dotenv_namespaceObject = require("dotenv");\n;// external "express"\nconst external_express_namespaceObject = require("express");\n;// external "express-handlebars"\nconst external_express_handlebars_namespaceObject = require("express-handlebars");\n;// ./src/services/helpers/help.js\nfunction calc(value) {\n  return value + 7;\n}\nfunction list(value, name, options) {\n  return "<h3>" + options.fn({\n    test: value,\n    test1: name,\n    label: "custom Helper List"\n  });\n}\nfunction IsEq(v1, v2, options) {\n  if (v1 === v2) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n}\nfunction BiggerThan(v1, options) {\n  if (v1.length > 0) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n}\nfunction LessThan(v1, options) {\n  if (v1.length <= 0) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n}\nfunction Inc(v1, options) {\n  return parseInt(v1) + 1;\n}\nfunction Json(v1, options) {\n  return JSON.stringify(v1);\n}\n;// ./src/services/pages/home.js\nvar HomePage = function HomePage(req, res) {\n  res.render(\'pages/home.hbs\', {\n    page: \'Home\',\n    title: \'HomePage\',\n    publicdata: \'/home/main\'\n  });\n};\n;// external "fs"\nconst external_fs_namespaceObject = require("fs");\n;// external "path"\nconst external_path_namespaceObject = require("path");\n;// external "mysql"\nconst external_mysql_namespaceObject = require("mysql");\n;// ./src/services/db/mysql.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n(0,external_dotenv_namespaceObject.config)({\n  path: ["const.env"]\n});\nvar dbConfig = _defineProperty(_defineProperty(_defineProperty({\n  connectionLimit: 10,\n  // default 10\n  host: process.env.MYSQL_DB_HOST,\n  user: process.env.MYSQL_DB_USERNAME,\n  password: process.env.MYSQL_DB_PASSWORD,\n  database: process.env.MYSQL_DB_NAME\n}, "connectionLimit", 20), "idleTimeoutMillis", 30000), "connectionTimeoutMillis", 2000);\nvar pool = external_mysql_namespaceObject.createPool(dbConfig);\nvar Connection = function Connection() {\n  return new Promise(function (resolve, reject) {\n    pool.getConnection(function (err, connection) {\n      if (err) reject(err);\n      console.log("MySQL pool connected: threadId " + connection.threadId);\n      var query = function query(sql, binding) {\n        return new Promise(function (resolve, reject) {\n          connection.query(sql, binding, function (err, result) {\n            if (err) reject(err);\n            resolve(result);\n          });\n        });\n      };\n      var release = function release() {\n        return new Promise(function (resolve, reject) {\n          if (err) reject(err);\n          console.log("MySQL pool released: threadId " + connection.threadId);\n          resolve(connection.release());\n        });\n      };\n      resolve({\n        query: query,\n        release: release\n      });\n    });\n  });\n};\nvar Query = function Query(sql, binding) {\n  return new Promise(function (resolve, reject) {\n    pool.query(sql, binding, function (err, result, fields) {\n      if (err) reject(err);\n      resolve(result);\n    });\n  });\n};\nvar dbConfigGenel = _defineProperty(_defineProperty(_defineProperty({\n  connectionLimit: 10,\n  // default 10\n  host: process.env.MYSQL_GeneralDB_HOST,\n  user: process.env.MYSQL_DB_USERNAME,\n  password: process.env.MYSQL_DB_PASSWORD,\n  database: process.env.MYSQL_GeneralDB_NAME\n}, "connectionLimit", 20), "idleTimeoutMillis", 30000), "connectionTimeoutMillis", 2000);\nvar poolGeneral = external_mysql_namespaceObject.createPool(dbConfigGenel);\nvar ConnectionGeneral = function ConnectionGeneral() {\n  return new Promise(function (resolve, reject) {\n    poolGeneral.getConnection(function (err, connection) {\n      if (err) reject(err);\n      console.log("MySQL pool connected: threadId " + connection.threadId);\n      var query = function query(sql, binding) {\n        return new Promise(function (resolve, reject) {\n          connection.query(sql, binding, function (err, result) {\n            if (err) reject(err);\n            resolve(result);\n          });\n        });\n      };\n      var release = function release() {\n        return new Promise(function (resolve, reject) {\n          if (err) reject(err);\n          console.log("MySQL pool released: threadId " + connection.threadId);\n          resolve(connection.release());\n        });\n      };\n      resolve({\n        query: query,\n        release: release\n      });\n    });\n  });\n};\nvar QueryGeneral = function QueryGeneral(sql, binding) {\n  return new Promise(function (resolve, reject) {\n    poolGeneral.query(sql, binding, function (err, result, fields) {\n      if (err) reject(err);\n      resolve(result);\n    });\n  });\n};\n;// ./src/services/api/il_ilce.js\nfunction il_ilce_typeof(o) { "@babel/helpers - typeof"; return il_ilce_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, il_ilce_typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == il_ilce_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(il_ilce_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\n\nvar AdresRoutes = function AdresRoutes(router) {\n  router.post("/adres/iller", GetIller);\n  router.post("/adres/ilceler", GetIlcelerFromIlId);\n  router.post("/adres/mahalleler", GetMahallelerFromIlIdAndIlceId);\n  router.post("/adres/pk", GetPostaKoduFromIlIdAndIlceIdAndMahalleId);\n};\nvar GetIller = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {\n    var sql, iller;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          sql = "Select * from iller";\n          _context.next = 3;\n          return QueryGeneral(sql);\n        case 3:\n          iller = _context.sent;\n          res.json(iller);\n        case 5:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function GetIller(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar GetIlcelerFromIlId = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {\n    var il_id, sql, ilceler;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          il_id = req.body.il_id;\n          console.log(\'il_id\', req.body);\n          sql = "Select * from ilceler where il_id = ?";\n          _context2.next = 5;\n          return QueryGeneral(sql, [il_id]);\n        case 5:\n          ilceler = _context2.sent;\n          res.json(ilceler);\n        case 7:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function GetIlcelerFromIlId(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar GetMahallelerFromIlIdAndIlceId = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {\n    var _req$body, il_id, ilce_id, sql, mahalleler;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _req$body = req.body, il_id = _req$body.il_id, ilce_id = _req$body.ilce_id;\n          sql = "Select * from mahalleler where il_id = ? and ilce_id = ?";\n          _context3.next = 4;\n          return QueryGeneral(sql, [il_id, ilce_id]);\n        case 4:\n          mahalleler = _context3.sent;\n          res.json(mahalleler);\n        case 6:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function GetMahallelerFromIlIdAndIlceId(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar GetPostaKoduFromIlIdAndIlceIdAndMahalleId = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {\n    var _req$body2, il_id, ilce_id, mahalle_id, sql, _yield$QueryGeneral, _yield$QueryGeneral2, mahalle;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _req$body2 = req.body, il_id = _req$body2.il_id, ilce_id = _req$body2.ilce_id, mahalle_id = _req$body2.mahalle_id;\n          sql = "Select * from mahalleler where il_id = ? and ilce_id = ? and id = ?";\n          _context4.next = 4;\n          return QueryGeneral(sql, [il_id, ilce_id, mahalle_id]);\n        case 4:\n          _yield$QueryGeneral = _context4.sent;\n          _yield$QueryGeneral2 = _slicedToArray(_yield$QueryGeneral, 1);\n          mahalle = _yield$QueryGeneral2[0];\n          res.json(mahalle.posta_kodu);\n        case 8:\n        case "end":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function GetPostaKoduFromIlIdAndIlceIdAndMahalleId(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n;// ./src/services/api/cert_query.js\nfunction cert_query_typeof(o) { "@babel/helpers - typeof"; return cert_query_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, cert_query_typeof(o); }\nfunction cert_query_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ cert_query_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == cert_query_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(cert_query_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { cert_query_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction cert_query_defineProperty(e, r, t) { return (r = cert_query_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction cert_query_toPropertyKey(t) { var i = cert_query_toPrimitive(t, "string"); return "symbol" == cert_query_typeof(i) ? i : i + ""; }\nfunction cert_query_toPrimitive(t, r) { if ("object" != cert_query_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != cert_query_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction cert_query_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction cert_query_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { cert_query_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { cert_query_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// import { QueryGeneral } from "../mysql.js";\nvar certificates = [{\n  id: "0",\n  trade_name: "ÖZATEŞ ASANSÖR DOĞALGAZ GAZ TİC. VE SAN. LTD. ŞTİ.",\n  legislation: "2014/33/EU Lifts Directive",\n  product_range: "Lifts",\n  module: "EU-Type Examınatıon For Lıfts And Safety Components For Lıfts",\n  status: "Active",\n  standarts: "EN81-20:2020,EN81-50:2020",\n  product_features: "Class-I 2:1",\n  effective_start_date: "16/12/2021",\n  expiration_date: "16/12/2026",\n  release_date: "16/12/2021",\n  registration_deadline: "16/12/2021",\n  cert_no: "LF/A-C-2656/21",\n  cert_id: "tvnrd-0233-23927-2355"\n}, {\n  id: "1",\n  trade_name: "Bor Asansor-Fatih Kirazci ve Ortagi Ferdi Ozdogan",\n  legislation: "2014/33/EU Lifts Directive",\n  product_range: "Lifts",\n  module: "Unit Verification-Annex VIII-Module G",\n  status: "Active",\n  standarts: "EN81-20:2020,EN81-50:2020",\n  product_features: "Class-I Electric",\n  effective_start_date: "01/02/2025",\n  expiration_date: "-",\n  release_date: "01/02/2025",\n  registration_deadline: "01/02/2025",\n  cert_no: "357.22722/357.22722/UF-VIII/2025",\n  cert_id: "tvnrd-0233-23927-243"\n}, {\n  id: "2",\n  trade_name: "ASMAKER ASANSOR TICARET VE SANAYI LIMITED SIRKETI",\n  legislation: "2014/33/EU Lifts Directive",\n  product_range: "Lifts",\n  module: "Unit Verification-Annex VIII-Module G",\n  status: "Active",\n  standarts: "EN81-20:2020,EN81-50:2020",\n  product_features: "Class-I Electric",\n  effective_start_date: "08/02/2025",\n  expiration_date: "-",\n  release_date: "08/02/2025",\n  registration_deadline: "08/02/2025",\n  cert_no: "357.22731/357.22731/UF-VIII/2025",\n  cert_id: "tvnrd-0233-23927-243"\n}, {\n  id: "3",\n  trade_name: "ASMAKER ASANSOR TICARET VE SANAYI LIMITED SIRKETI",\n  legislation: "2014/33/EU Lifts Directive",\n  product_range: "Lifts",\n  module: "Unit Verification-Annex VIII-Module G",\n  status: "Active",\n  standarts: "EN81-20:2020,EN81-50:2020",\n  product_features: "Class-I Electric",\n  effective_start_date: "08/02/2025",\n  expiration_date: "-",\n  release_date: "08/02/2025",\n  registration_deadline: "08/02/2025",\n  cert_no: "357.22730/357.22730/UF-VIII/2025",\n  cert_id: "tvnrd-0233-23927-243"\n}];\nvar CertQueryTuv = function CertQueryTuv(router) {\n  router.post("/cq", GetCert);\n};\nvar GetCert = /*#__PURE__*/function () {\n  var _ref = cert_query_asyncToGenerator(/*#__PURE__*/cert_query_regeneratorRuntime().mark(function _callee(req, res) {\n    var data, legislation, cert_no, findedEl;\n    return cert_query_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // const sql = `Select * from iller`;\n          data = req.body;\n          if (data) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt("return", res.status(404).json({\n            err: "Error!"\n          }));\n        case 3:\n          console.log(data);\n          legislation = data.legislation, cert_no = data.cert_no;\n          findedEl = certificates.filter(function (item) {\n            return item.legislation.includes(legislation) && item.cert_no === cert_no;\n          });\n          if (!(!!findedEl && findedEl.length > 0)) {\n            _context.next = 8;\n            break;\n          }\n          return _context.abrupt("return", res.json(_objectSpread({\n            msg: "Finded"\n          }, findedEl[0])));\n        case 8:\n          res.json({\n            msg: "Not Founded"\n          });\n        case 9:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function GetCert(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n;// ./src/services/api/api.js\n\n\n\nvar router = external_express_namespaceObject.Router({\n  mergeParams: true\n});\nvar apiRoutes = function apiRoutes(app) {\n  AdresRoutes(router);\n  CertQueryTuv(router);\n  app.use("/api", router);\n};\n;// ./src/services/main.js\n\n\n\nvar main_router = external_express_namespaceObject.Router({\n  mergeParams: true\n});\n// import { SslStatus } from "./ssl.js";\n\nvar appRoutes = function appRoutes(app) {\n  main_router.get("/", HomePage);\n  apiRoutes(app);\n  return app.use("/", main_router);\n};\n;// external "body-parser"\nconst external_body_parser_namespaceObject = require("body-parser");\n;// external "method-override"\nconst external_method_override_namespaceObject = require("method-override");\n;// external "cookie-parser"\nconst external_cookie_parser_namespaceObject = require("cookie-parser");\n;// external "express-session"\nconst external_express_session_namespaceObject = require("express-session");\n;// external "connect-flash"\nconst external_connect_flash_namespaceObject = require("connect-flash");\n;// external "passport"\nconst external_passport_namespaceObject = require("passport");\n;// external "compression"\nconst external_compression_namespaceObject = require("compression");\n;// ./src/server.js\n\n(0,external_dotenv_namespaceObject.config)({\n  path: ["const.env"]\n});\n\n\n\n\n\n\n\n\n\n\n\nvar app = external_express_namespaceObject();\nvar PORT = process.env.PORT || 3000;\n//only development mode\nif (false) { var liveReloadServer, connectLiveReload, livereload; } else {\n  app.use(external_compression_namespaceObject());\n}\napp.use(external_cookie_parser_namespaceObject(\'secret\'));\napp.use(external_express_session_namespaceObject({\n  secret: \'secret\',\n  resave: true,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 1000 * 60 * 60 * 24 // 86400000 1 day\n  }\n}));\napp.engine(".hbs", (0,external_express_handlebars_namespaceObject.engine)({\n  defaultLayout: "main",\n  extname: ".hbs",\n  layoutsDir: "views/layouts",\n  partialsDir: "views/partials",\n  helpers: {\n    calc: calc,\n    list: list,\n    IsEq: IsEq,\n    BiggerThan: BiggerThan,\n    LessThan: LessThan,\n    Inc: Inc,\n    Json: Json\n  }\n}));\napp.set("view engine", ".hbs");\napp.set("views", "".concat(process.cwd(), "/views"));\napp.use(external_express_namespaceObject["static"]("public"));\napp.use(external_body_parser_namespaceObject.urlencoded({\n  extended: true\n}));\napp.use(external_body_parser_namespaceObject.json());\napp.use(external_method_override_namespaceObject("_method"));\n//Enable flash message\napp.use(external_connect_flash_namespaceObject());\n//Config passport middleware\napp.use(external_passport_namespaceObject.initialize());\napp.use(external_passport_namespaceObject.session());\nappRoutes(app);\napp.all("**", function (req, res) {\n  res.render("pages/404.hbs");\n});\n\n//****************************************/\napp.listen(PORT, function () {\n  console.log("Server is starting at ".concat(PORT));\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///946\n')}},__webpack_exports__={};__webpack_modules__[946]()})();